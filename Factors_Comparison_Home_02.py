 # -*- coding: utf-8 -*-
"""
Created on Wed Aug 23 10:17:20 2017

@author: ttrinhtran

9/7/17: 
    Version 1.0 using Carrier to match
    Version 2.0: will match by Company Code & NAIC and include enhancements, bug fixes if found during testing trial

    Requirements:
        csv files generated by IQ need to be saved in data\results\st folder
        the files from THIS year build are to be moved to subfolder named New
        the files from LAST year build are to be moved to subfolder named Old        
"""

import numpy as np
import pandas as pd
#import datetime
import time
import csv

states = {
        'AL': ['Alabama'],
        'AK': ['Alaska'],
        'AZ': ['Arizona'],
        'AR': ['Arkansas'],
        'CA': ['California'],
        'CO': ['Colorado'],
        'CT': ['Connecticut'],
        'DE': ['Delaware'],
        'DC': ['Washington DC'],
        'FL': ['Florida'],
        'GA': ['Georgia'],
        'HI': ['Hawaii'],
        'ID': ['Idaho'],
        'IL': ['Illinois'],
        'IN': ['Indiana'],
        'IA': ['Iowa'],
        'KS': ['Kansas'],
        'KY': ['Kentucky'],
        'LA': ['Louisiana'],
        'ME': ['Maine'],
        'MD': ['Maryland'],
        'MA': ['Massachusetts'],
        'MI': ['Michigan'],
        'MN': ['Minnesota'],
        'MS': ['Mississippi'],
        'MO': ['Missouri'],
        'MT': ['Montana'],
        'NE': ['Nebraska'],
        'NV': ['Nevada'],
        'NH': ['New Hampshire'],
        'NJ': ['New Jersey'],
        'NM': ['New Mexico'],
        'NY': ['New York'],
        'NC': ['North Carolina'],
        'ND': ['North Dakota'],
        'OH': ['Ohio'],
        'OK': ['Oklahoma'],
        'OR': ['Oregon'],
        'PA': ['Pennsylvania'],
        'RI': ['Rhode Island'],
        'SC': ['South Carolina'],
        'SD': ['South Dakota'],
        'TN': ['Tennessee'],
        'TX': ['Texas'],
        'UT': ['Utah'],
        'VT': ['Vermont'],
        'VA': ['Virginia'],
        'WA': ['Washington'],
        'WV': ['West Virginia'],
        'WI': ['Wisconsin'],
        'WY': ['Wyoming']
        }

#now = datetime.datetime.now()
#y1 = now.year
#y0 = y1 -1

start_time=time.time()

state = input('Your favorite state, use abbreviation e.g. wa: ' ).upper()
while True:
    if state in states:
        break
    else:
        print('We do not have business in the entered state, please re-enter')
        state = input('Your favorite state, use abbreviation e.g. wa: ' ).upper()
    
st = states.get(state)[0]

line = input('Auto or Home: ' ).capitalize()
while True:
    if line == 'Auto' or line == 'Home':
        break
    else:
        print('Incorrect line of business, please re-enter')
        line = input('Auto or Home: ' ).capitalize()

Old = input('Old Build Date: ')
New = input('New Build Date: ')
              
sit_num_input = input("Type situation number(s), if multiple, separate by space: ")      
sit_num = list(sit_num_input.split())

#try:
#    Old_Co = pd.read_csv(r'T:\ACT_PID\Pcm_brm\%s\InsurQuote\data\results\%s\%s\Companies.csv' %(line, st, Old))
#    New_Co = pd.read_csv(r'T:\ACT_PID\Pcm_brm\%s\InsurQuote\data\results\%s\%s\Companies.csv' %(line, st, New))
#except OSError:
#    print('Please check if Companies.csv file(s) is/are in the folder(s)')
#    
#Companies = pd.concat([Old_Co, New_Co])
#Col_Names = [col for col in New_Co.columns] + [col for col in Companies.columns if col not in [col for col in New_Co.columns]]
#Companies = Companies[Col_Names]

#try:
#    Old_factors0 = pd.read_csv(r'T:\ACT_PID\Pcm_brm\%s\InsurQuote\data\results\%s\%s\Factors.csv' %(line, st, Old))#,low_memory=False,dtype={'Policy Key':str,'Company Key':int,'Factor Name':str},  chunksize = 1000000)
#    New_factors0 = pd.read_csv(r'T:\ACT_PID\Pcm_brm\%s\InsurQuote\data\results\%s\%s\Factors.csv' %(line, st, New))#,low_memory=False,dtype={'Policy Key':str,'Company Key':int,'Factor Name':str},  chunksize = 1000000)
#except OSError:
#    print('Please check if Factors.csv file(s) is/are in the folder(s)')

#try to replace 5 lines of codes above using csv.reader to read only rows met criteria
#import csv

#import pandas as pd
#
#sit_num_input = input("Type situation number(s), if > 1, separate by space: ")      
#sit_num = list(sit_num_input.split())

writer = pd.ExcelWriter(r'T:\ACT_PID\Pcm_brm\%s\InsurQuote\data\results\%s\Analysis\%s_%s_vs_%s_Sit_%s.xlsx' %(line, st, state, Old, New, sit_num_input))  

try:
    Old_Co = pd.read_csv(r'T:\ACT_PID\Pcm_brm\%s\InsurQuote\data\results\%s\%s\Companies.csv' %(line, st, Old))
    New_Co = pd.read_csv(r'T:\ACT_PID\Pcm_brm\%s\InsurQuote\data\results\%s\%s\Companies.csv' %(line, st, New))
except OSError:
    print('Please check if Companies.csv file(s) is/are in the folder(s)')

Old_Co.insert(0, 'Version', 'Old')
New_Co.insert(0, 'Version', 'New')
    
Companies = pd.concat([Old_Co, New_Co])
Col_Names = [col for col in New_Co.columns] + [col for col in Companies.columns if col not in [col for col in New_Co.columns]]
Companies = Companies[Col_Names]

Companies = Companies.sort_values(['Carrier Name', 'Version'], ascending=False)

Companies.to_excel(writer,'Companies', index=False)
writer.sheets['Companies'].autofilter(0, 0, 0, len(Companies.columns)-1)

sit_num_conversion = []
sit_num_conversion = ['HO_SIT' + (5 - len(x))*'0' + x if state == 'CA' else 'HO_SIT' + (5 - len(x))*'0' + x + '#0' for x in sit_num]

rows = []
with open(r'T:\ACT_PID\Pcm_brm\%s\InsurQuote\data\results\%s\%s\Factors.csv' %(line, st, Old)) as csvfile:
    file = csv.reader(csvfile, delimiter=',') # %(line, st))   
    for row in file: 
        if row[0] in(sit_num_conversion):
            rows.append(row)

Old_factors0 = pd.DataFrame.from_records(rows, columns=['Policy Key', 'Company Key', 'Factor Name', 'Factor Value'])

rows1 = []
with open(r'T:\ACT_PID\Pcm_brm\%s\InsurQuote\data\results\%s\%s\Factors.csv' %(line, st, New)) as csvfile:
    file1 = csv.reader(csvfile, delimiter=',') # %(line, st))   
    for row1 in file1: 
        if row1[0] in(sit_num_conversion):
            rows1.append(row1)

New_factors0 = pd.DataFrame.from_records(rows1, columns=['Policy Key', 'Company Key', 'Factor Name', 'Factor Value'])


#for i in sit_num:
#    wb  = writer.book
##    df_Old = [] 
##    df_New = []
#    df = []    
#    rows = []
#    k = 5 - len(i) 
#    with open(r'T:\ACT_PID\Pcm_brm\%s\InsurQuote\data\results\%s\%s\Factors.csv' %(line, st, Old)) as csvfile:
#        file = csv.reader(csvfile, delimiter=',') # %(line, st))   
#        for row in file: 
#            if state == 'CA' and row[0] == 'HO_SIT' + k*'0' + i:
#                rows.append(row)
#            elif row[0] == 'HO_SIT' + k*'0' + i + '#0':
#                rows.append(row)
#                    
#    df_Old_0 = pd.DataFrame.from_records(rows, columns=['Policy Key', 'Company Key', 'Factor Name', 'Factor Value'])
##    df_Old_0.apply(pd.to_numeric) #, errors='ignore')
##    df_Old_0 = df_Old_0.convert_objects(convert_numeric=True)    
#    df_Old_0['Company Key'] = pd.to_numeric(df_Old_0['Company Key']) #, errors='coerce')
##    df_Old_0['Company key'] = df_Old_0['Company Key'].astype(int)
##    df['New'] = pd.to_numeric(df['Factor Value_New'], errors='coerce')    
#    df_Old = pd.merge(df_Old_0, Old_Co.loc[:, ['Company Key', 'Carrier Name', 'Company Name']], on=['Company Key'], how='left')
##    df_Old.to_excel(writer, i+'Old', index=False)
#    
#    rows1 = []
#    with open(r'T:\ACT_PID\Pcm_brm\%s\InsurQuote\data\results\%s\%s\Factors.csv' %(line, st, New)) as csvfile1:
#        file1 = csv.reader(csvfile1, delimiter=',') # %(line, st))   
#        for row1 in file1: 
#            if state == 'CA' and row1[0] == 'HO_SIT' + k*'0' + i:
#                rows1.append(row1)            
#            elif row1[0] == 'HO_SIT' + k*'0' + i + '#0':
#                rows1.append(row1)
#    df_New_0 = pd.DataFrame.from_records(rows1, columns=['Policy Key', 'Company Key', 'Factor Name', 'Factor Value'])
##    df_New_0.apply(pd.to_numeric) #, errors='ignore') 
##    df_New_0 = df_New_0.convert_objects(convert_numeric=True)
#    df_New_0['Company Key'] = pd.to_numeric(df_New_0['Company Key']) #, errors='coerce')
#    df_New = pd.merge(df_New_0, New_Co.loc[:, ['Company Key', 'Carrier Name', 'Company Name']], on=['Company Key'], how='left')
##    df_New.to_excel(writer, i+'New', index=False)
#
#
##
##STOP
#
##Old_factors0 = pd.concat(chunk for chunk in Old_factors0)
##New_factors0 = pd.concat(chunk for chunk in New_factors0)
#    
Old_factors0['Company Key'] = pd.to_numeric(Old_factors0['Company Key']) #, errors='coerce')
New_factors0['Company Key'] = pd.to_numeric(New_factors0['Company Key']) #, errors='coerce')

Old_factors1 = Old_factors0.sort_values(['Policy Key', 'Company Key', 'Factor Name'], ascending=True)
New_factors1 = New_factors0.sort_values(['Policy Key', 'Company Key', 'Factor Name'], ascending=True)
#
Old_factors2 = pd.merge(Old_factors1, Old_Co.loc[:, ['Company Key', 'Carrier Name', 'Company Name']], on=['Company Key'], how='left')
New_factors2 = pd.merge(New_factors1, New_Co.loc[:, ['Company Key', 'Carrier Name', 'Company Name']], on=['Company Key'], how='left')
#
#pd.formats.format.header_style = None
##pd.io.formats.format.header_style = None
##pd.core.format.header_style = None
#writer = pd.ExcelWriter(r'T:\ACT_PID\Pcm_brm\%s\InsurQuote\data\results\%s\Analysis\%s_vs_%s_Sit_%s.xlsx' %(line, st, Old, New, sit_num_input))   
#Companies.to_excel(writer,'Companies', index=False)
#writer.sheets['Companies'].autofilter(0, 0, 0, len(Companies.columns))

wb  = writer.book
    
for i in sit_num:
    df_Old = [] 
    df_New = []
    df = []

    if line == 'Home':
        k = 5 - len(i)
        if state == 'CA':
            n = 'HO_SIT' + k*'0' + i
        else:
            n = 'HO_SIT' + k*'0' + i + '#0'
    else:
        if len(i) == 1:
            n = 'SIT0' + i + '#0#0' #2 Modifiers, if there's 1, the key will become #0 --> ???:should program look at Modifier file to calculate the value of key
        else:
            n = 'SIT' + i + '#0#0'

            
    df_Old = Old_factors2.loc[Old_factors2['Policy Key'] == n]
    df_New = New_factors2.loc[New_factors2['Policy Key'] == n]

    if line == 'Home': 
        df = pd.merge(df_Old, df_New, on=['Policy Key', 'Carrier Name', 'Factor Name'], how='outer', suffixes=('_Old', '_New'))
    else:
        df = pd.merge(df_Old, df_New, on=['Policy Key', 'Carrier Name', 'Vehicle', 'Factor Name'], how='outer', suffixes=('_Old', '_New'))

    df['Old'] = pd.to_numeric(df['Factor Value_Old'], errors='coerce')
    df['New'] = pd.to_numeric(df['Factor Value_New'], errors='coerce')
        
    def change(x):
        if np.isnan(x['Old']) and np.isnan(x['New']):
            if x['Factor Value_New'] == x['Factor Value_Old']:
                return ""
            else:
                return "diff."
        elif x['Factor Value_New'] == x['Factor Value_Old']:
            return ""
        elif np.isnan(x['New']) and not np.isnan(x['Old']):
            return "factor no longer applied"
        elif not np.isnan(x['New']) and np.isnan(x['Old']):
            return "new factor"        
        else:
            try:
                return x['New']/x['Old']-1
            except ZeroDivisionError:
                return "check"
                    
    df['New/Old-1'] = df.apply(change, axis=1)
    
    df.Old.fillna(df['Factor Value_Old'], inplace=True)
    df.New.fillna(df['Factor Value_New'], inplace=True)

    def change_1(x):
        if x['New/Old-1'] == "factor no longer applied" and x['Old'] < 2:
            try:
                return 1/x['Old']-1
            except ZeroDivisionError:
                pass
        if x['New/Old-1'] == "new factor" and x['New'] < 2:     
            try:
                return x['New']-1
            except ZeroDivisionError:
                pass
    df['Adtl.'] = df.apply(change_1, axis=1)

    if line == 'Home':
        df = df.loc[:,['Policy Key', 'Company Name_Old', 'Company Name_New', 'Carrier Name', 'Factor Name', 'Old', 'New', 'New/Old-1', 'Adtl.']]
    else:
        df = df.loc[:,['Policy Key', 'Company Name_Old', 'Company Name_New', 'Carrier Name', 'Factor Name', 'Vehicle', 'Old', 'New', 'New/Old-1', 'Adtl.']]
    
    df_Old.to_excel(writer, i+'Old', index=False)
    df_New.to_excel(writer, i+'New', index=False)
    df.to_excel(writer,'Sit'+i, index=False)
    
    writer.sheets[i+'Old'].freeze_panes('A2')
    writer.sheets[i+'New'].freeze_panes('A2')    
    writer.sheets['Sit'+i].freeze_panes('E2')
    writer.sheets[i+'Old'].autofilter('A1:F1' if line == 'Home' else 'A1:G1') 
    writer.sheets[i+'New'].autofilter('A1:F1' if line == 'Home' else 'A1:G1') 
    
    writer.sheets['Sit'+i].set_column('A:C', None, None, {'level': 1, 'hidden': True})    
    writer.sheets['Sit'+i].set_column('D:D', None, None, {'collapsed': True}) 
    writer.sheets['Sit'+i].autofilter('A1:I1' if line == 'Home' else 'A1:J1')   

    writer.sheets['Sit'+i].set_column('D:D', 30)
    writer.sheets['Sit'+i].set_column('E:E', 60)  


    format0 = wb.add_format({'num_format': '0.0%'})
    format1 = wb.add_format({'bold': True})
    writer.sheets['Sit'+i].set_row(0, None, format1)
    writer.sheets['Sit'+i].set_column('H:H' if line == 'Home' else 'I:I', 22, format0)
    writer.sheets['Sit'+i].set_column('I:I' if line == 'Home' else 'J:J', None, format0)

writer.save()
#minutes = (time.time() - start_time)%3600/60
runtime = round(time.time() - start_time, 0)
minutes = round(runtime // 60)
seconds = round(runtime % 60)
print("Process took %dm:%ds" %(minutes, seconds))
#print("Process took %.2f minutes" % minutes )
print('Complete!')
#############

#"""
#import csv
#import pandas as pd
#
#sit_num_input = input("Type situation number(s), if > 1, separate by space: ")      
#sit_num = list(sit_num_input.split())
#
#writer = pd.ExcelWriter(r'T:\ACT_PID\Pcm_brm\Home\InsurQuote\data\results\Indiana\16_vs_17_Sit_%s.xlsx' %(sit_num_input))   
##Companies.to_excel(writer,'Companies', index=False)
##writer.sheets['Companies'].autofilter(0, 0, 0, len(Companies.columns))
#
#for i in sit_num:
#    wb  = writer.book
#    rows = []
#    k = 5 - len(i) 
#    with open(r'T:\ACT_PID\Pcm_brm\Home\InsurQuote\data\results\Indiana\New\Factors.csv') as csvfile:
#        file = csv.reader(csvfile, delimiter=',') # %(line, st))   
#        for row in file: 
#            if row[0] == 'HO-3_SIT' + k*'0' + i + '#0':
#                rows.append(row)
#    df = pd.DataFrame.from_records(rows, columns=['Policy Key', 'Company Key', 'Factor Name', 'Factor Value'])
#    df.to_excel(writer, i+'Old', index=False)
#"""
###########